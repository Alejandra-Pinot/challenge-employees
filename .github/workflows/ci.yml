name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest

    env:
      APP_ENV: test
      APP_DEBUG: 0
      DATABASE_URL: "mysql://root:password@127.0.0.1:3306/hrm_system_test?serverVersion=8.0&charset=utf8mb4"

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: hrm_system_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -ppassword -h 127.0.0.1 || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, pdo_mysql
          coverage: xdebug

      - name: Copy env example
        run: cp .env.example .env

      - name: Validate composer.json
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-
            
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run migrations
        run: php bin/console doctrine:migrations:migrate -n

      - name: Run PHPStan
        run: composer stan

      - name: Run PHP CS Fixer (check)
        run: composer cs:check

      - name: Run PHPUnit tests (with coverage)
        run: |
          ./vendor/bin/phpunit --colors=always --coverage-clover=coverage.xml || \
          composer test:coverage || true
        continue-on-error: false

      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     file: ./coverage.xml
      #     flags: backend
      #     name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Detect Node lockfiles
        id: detect_lock
        run: |
          if [ -f package-lock.json ] || [ -f yarn.lock ] || [ -f npm-shrinkwrap.json ]; then
            echo "present=true" >> "$GITHUB_OUTPUT"
          else
            echo "present=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Node.js
        if: steps.detect_lock.outputs.present == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        if: steps.detect_lock.outputs.present == 'true'
        run: npm ci

      - name: Run ESLint
        if: steps.detect_lock.outputs.present == 'true'
        run: npm run lint

      - name: Run Prettier check
        if: steps.detect_lock.outputs.present == 'true'
        run: npx prettier --check "src/**/*.{js,vue,ts,jsx,tsx}"

      - name: Run tests
        if: steps.detect_lock.outputs.present == 'true'
        run: npm run test:coverage

      - name: Skip (no frontend lockfiles found)
        if: steps.detect_lock.outputs.present != 'true'
        run: echo "No Node lockfile detected; skipping frontend job."

  # code-quality:
  #   runs-on: ubuntu-latest
  #   needs: [backend-tests]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: SonarCloud Scan
  #       uses: SonarSource/sonarcloud-github-action@master
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       with:
  #         args: >
  #           -Dsonar.projectKey=hrm-system
  #           -Dsonar.organization=your-org
  #           -Dsonar.sources=src
  #           -Dsonar.tests=tests
  #           -Dsonar.php.coverage.reportPaths=coverage.xml
  #           -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
  #           -Dsonar.coverage.exclusions=**/*Test.php,**/*Spec.php,**/*.test.js,**/*.spec.js
  #           -Dsonar.test.inclusions=**/*Test.php,**/*Spec.php,**/*.test.js,**/*.spec.js

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Copy env example
        run: cp .env.example .env

      - name: Up docker compose
        run: |
          docker compose up -d --build
          docker compose ps

      - name: Fix ownership & git safe.directory (container)
        run: |
          # Deja el workspace a nombre de www-data (propietario de la app en la imagen)
          docker compose exec -T -u root php sh -lc "chown -R www-data:www-data /var/www/html"
          # Configura safe.directory para el usuario que S√ç usaremos (www-data)
          docker compose exec -T -u www-data php git config --global --add safe.directory /var/www/html

      - name: Install PHP deps inside container (as www-data)
        run: docker compose exec -T -u www-data php composer install --no-progress --prefer-dist

      - name: Run migrations inside container (as www-data)
        run: docker compose exec -T -u www-data php php bin/console doctrine:migrations:migrate -n

      - name: Wait for web (8080)
        run: |
          for i in {1..40}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/)
            if [ "$code" -ge 200 ] && [ "$code" -lt 500 ]; then
              echo "Web is up with HTTP $code"; exit 0
            fi
            echo "Waiting web... ($i) last=$code"
            sleep 3
          done
          docker compose logs web || true
          exit 1

      - name: Fix workspace permissions for ZAP reports
        run: sudo chown -R "$USER:$USER" "$GITHUB_WORKSPACE"

      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:8080'

      - name: Docker logs (on failure)
        if: failure()
        run: docker compose logs --no-color

  deploy:
    runs-on: ubuntu-latest
    needs: [backend-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here

      - name: Notify deployment
        run: |
          echo "Deployment completed successfully!"
          # Add notification commands here